Object subclass: #Cosecha	instanceVariableNames: 'rendimiento precioActualCultivo fecha'	classVariableNames: ''	package: 'TP1'!!Cosecha methodsFor: 'initialization' stamp: 'Anonymous 9/22/2022 16:34'!getFecha"Retorna la fecha de la cosecha"^fecha.! !!Cosecha methodsFor: 'initialization' stamp: 'Anonymous 9/21/2022 18:51'!setFecha: unaFechafecha:= unaFecha.! !!Cosecha methodsFor: 'initialization' stamp: 'Anonymous 9/22/2022 16:35'!setPrecioActualCultivo: valor"Define el precio actual del cultivo"precioActualCultivo :=valor.! !!Cosecha methodsFor: 'initialization' stamp: 'Anonymous 9/22/2022 16:36'!setRendimiento: valorh"Define el rendimiento de la cosecha"rendimiento :=valorh.! !!Cosecha methodsFor: 'as yet unclassified' stamp: 'Anonymous 9/22/2022 16:34'!getPrecioActualCultivo"Retorna el precio actual del cultivo"^precioActualCultivo.! !!Cosecha methodsFor: 'as yet unclassified' stamp: 'Anonymous 9/22/2022 16:35'!getRendimiento"Retorna el rendimiento de la cosecha"^rendimiento.! !Object subclass: #Empresa	instanceVariableNames: 'parcelas propietarios siembras cosechas'	classVariableNames: ''	package: 'TP1'!!Empresa methodsFor: 'as yet unclassified' stamp: 'Anonymous 9/22/2022 17:03'!registrarDatosPropietario: doc nombre: n apellido: ap"Crea un propietario y lo agrega a la lista de propietarios de parcelas de la empresa."|inst|inst := Propietario new.inst setDni: doc; setNombre: n; setApellido: ap; setParcelas.propietarios add: inst.^inst.! !!Empresa methodsFor: 'as yet unclassified' stamp: 'Anonymous 9/22/2022 16:58'!incorporarParcelaAcuerdo: codigoParcela hectareas: cant porcentajeAcordado: porcentaje dniPropietario: dni"Agrega la parcela (con sus datos correspondientes),si no existe, a la empresa y ademas la agrega al propietario con id igual a dni."|inst|inst:= ParcelaAcuerdo new.inst setCodigo: codigoParcela; setDimension: cant; setPorcentajeAcordado: porcentaje; setCosechas.parcelas detect: [:i| i getCodigo = codigoParcela] ifNone: [ propietarios do: [ :j| j getDni = dni 																			ifTrue:[parcelas add: inst. 																					  inst setPropietario:dni.																				self agregarParcela:inst aPropietario:dni.																																											 																						^inst]	].].																																						^'Parcela existente y/o propietario no existente'.! !!Empresa methodsFor: 'as yet unclassified' stamp: 'Anonymous 9/22/2022 16:46'!calcularPagoPropietarioUltCosecha: dni"Detecta el propietario con id igual a dni, si no existe dicho propietario se retorna un mensaje correspondietne, sino calcula el pago correspondiente por cada una de sus parcelas y se retorna el total."|aux totalaPagar|aux := propietarios detect: [ :i| i getDni = dni.] ifNone:[^'No existe propietario con dicho dni'].totalaPagar :=0.(aux getParcelas) do: [:i| totalaPagar:= totalaPagar + (self calcularGananciaUltimaCosecha:(i getCodigo)).].^totalaPagar.! !!Empresa methodsFor: 'as yet unclassified' stamp: 'Anonymous 9/22/2022 16:37'!agregarParcela:inst aPropietario:dni"Busca en los propietarios de la empresa aquel que coincida con dni, y le agrega a sus parcelas la parcela inst"propietarios do: [ :j| j getDni = dni ifTrue: [j agregarParcela: inst.]].! !!Empresa methodsFor: 'as yet unclassified' stamp: 'Anonymous 9/22/2022 16:43'!calcularGananciaUltimaCosecha: codigoParcela"Busca la parcela correspondiente a codigoParcela, si no existe o la misma no tiene cosechas se retorna un mensaje correspondiente, sino se calcula la ganancia de la ultima cosecha de dicha parcela"|aux cosechaaux ganancia gananciaNeta|aux := parcelas detect: [ :i| i getCodigo = codigoParcela] ifNone: [^'Parcela no encontrada'].(aux getCosechas) isEmpty ifTrue: [^'La parcela no tiene cosechas'].cosechaaux := ((aux getCosechas) at: ((aux getCosechas )size)).gananciaNeta:= ((cosechaaux getPrecioActualCultivo) * (cosechaaux getRendimiento) * (aux getDimension)).aux esParcelaAcuerdo ifTrue: [ganancia:= gananciaNeta -(((aux gastos)*0.01)* gananciaNeta).] 							ifFalse: [ganancia:= gananciaNeta - (aux gastos).].^ganancia.! !!Empresa methodsFor: 'as yet unclassified' stamp: 'Anonymous 9/22/2022 16:59'!inicializar"Crea las instancias de Collection correspondientes a los atributos de la empresa."parcelas:= OrderedCollection new.propietarios:= OrderedCollection new.siembras:= OrderedCollection  new.cosechas:= OrderedCollection  new.! !!Empresa methodsFor: 'as yet unclassified' stamp: 'Anonymous 9/22/2022 17:01'!listarGanancias: codigoParcela"Detecta la parcela con codigoParcela, si la misma no existe o no tiene cosechas se retorna un mensaje correspondiente, sino se crea un diccionario en donde las claves son las fechas de las cosechas y los valores son las ganancias de las mismas."|aux listaGanancias|listaGanancias := Dictionary new.aux:= parcelas detect: [:i| i getCodigo = codigoParcela.] ifNone:[^'Parcela no existente'].(aux getCosechas) isEmpty ifTrue:[^'La parcela no tiene cosechas'].(aux getCosechas) do:[:i| listaGanancias at: (i getFecha) put: (aux calcularGananciaCosecha: i).].^listaGanancias.! !!Empresa methodsFor: 'as yet unclassified' stamp: 'Anonymous 9/22/2022 16:56'!calcularPagoPropietarioUltCosechaconParcela: codigoParcela"Detecta la parcela con codigoParcela, si la misma no existe o no tiene cosechas se retorna el mensaje correspondiente, sino se devuelve el total a pagar al propietario o los impuestos a pagar."|aux totalaPagar gananciaNeta |aux := parcelas detect: [ :i| i getCodigo = codigoParcela] ifNone: [^'Parcela no encontrada'].(aux getCosechas) isEmpty ifTrue: [^'La parcela no tiene cosechas'].gananciaNeta:= self calcularGananciaNetaUltimaCosecha: codigoParcela.aux esParcelaAcuerdo ifTrue: [totalaPagar:= (((aux gastos)*0.01)*gananciaNeta).]							ifFalse: [totalaPagar:= aux gastos.].^totalaPagar.! !!Empresa methodsFor: 'as yet unclassified' stamp: 'Anonymous 9/22/2022 16:42'!calcularGananciaTotal: codigoParcela"Busca la parcela correspondiente a codigoParcela, si no existe o la misma no tiene cosechas se retorna un mensaje correspondiente, sino se calcula la ganancia de cada cosecha y se retorna un acumulador que suma dichas ganancias"|aux gananciaTotal gananciaAux|aux:= parcelas detect: [:i| i getCodigo = codigoParcela.] ifNone:[^'Parcela no existente'].gananciaTotal:=0.(aux getCosechas) isEmpty  ifTrue: [^'La parcela no tiene cosechas'].(aux getCosechas) do: [:i| gananciaAux:=(((i getPrecioActualCultivo) * (i getRendimiento) * (aux 								getDimension))). aux esParcelaAcuerdo				ifTrue:[gananciaTotal:= gananciaTotal+(gananciaAux - (((aux gastos)*0.01)* gananciaAux))] 				ifFalse:[gananciaTotal:= gananciaTotal + (gananciaAux -(aux gastos))]].  																																																														^gananciaTotal.																																																																																																																														! !!Empresa methodsFor: 'as yet unclassified' stamp: 'Anonymous 9/22/2022 17:03'!registrarCosecha: codigoParcela rendimientoPorHectarea: valorh precioActualCultivo: valor fecha: fecha"Detecta la parcela con codigoParcela, si la misma no existe o no esta sembrada se retorna un mensaje correspondiente, sino se agrega una cosecha a dicha parcela, relacionandola con la siembra actual y dejando lugar en la parcela para una nueva siembra."|instcosecha aux siembra|instcosecha := Cosecha new.instcosecha  setRendimiento: valorh; setPrecioActualCultivo: valor; setFecha: fecha.aux:= parcelas detect: [:i| i getCodigo = codigoParcela.] ifNone:[^'Parcela no existente'].siembra:= aux getSiembra.siembra ifNil: [^'Parcela no sembrada'] 			ifNotNil: [ siembra setCosechaenSiembra: instcosecha.							aux setSiembra: nil.							aux setCosecha: instcosecha.							cosechas add: instcosecha.							instcosecha setFecha: fecha.							^aux.].! !!Empresa methodsFor: 'as yet unclassified' stamp: 'Anonymous 9/22/2022 16:59'!incorporarParcelaPropia: codigoParcela hectareas: cant costoImpuestos: importe"Agrega la parcela (con sus datos correspondientes), si no existe, a la empresa."|inst|inst:= ParcelaPropia new.inst setDimension: cant; setCodigo: codigoParcela;setCostoImpuestos: importe;setCosechas.parcelas detect: [:i| i getCodigo = codigoParcela] ifNone: [parcelas add:inst. 																			  ^inst.].^'Parcela existente'.! !!Empresa methodsFor: 'as yet unclassified' stamp: 'Anonymous 9/22/2022 16:59'!incorporarParcelaAlquilada: codigoParcela hectareas: cant costoAlquiler:importe dniPropietario: dni"Agrega la parcela (con sus datos correspondientes),si no existe, a la empresa y ademas la agrega al propietario con id igual a dni."|inst|inst:= ParcelaAlquilada new.inst setCodigo: codigoParcela; setDimension: cant; setCostoAlquiler: importe;setCosechas.parcelas detect: [:i| i getCodigo = codigoParcela] ifNone: [ propietarios do: [ :j| j getDni = dni 																			ifTrue:[parcelas add: inst. 																						inst setPropietario:dni. 																			self agregarParcela:inst aPropietario:dni.																																																	 																					^inst]]																			].^'Parcela existente y/o propietario no existente'.! !!Empresa methodsFor: 'as yet unclassified' stamp: 'Anonymous 9/22/2022 17:04'!registrarSiembra: codigoParcela cultivo: nombreCultivo fecha: fecha"Detecta la parcela con codigoParcela, si la misma no existe o esta sembrada actualmente se retorna un mensaje correspondiente, sino se crea una siembra (con sus valores correspondientes) y se la asigna a dicha parcela."|inst aux|inst:= Siembra new.inst setVariedadCultivo: nombreCultivo.aux:= parcelas detect: [:i| i getCodigo = codigoParcela.] ifNone: [^'Parcela no existente'.].aux getSiembra ifNil: [aux setSiembra: inst. siembras add:inst. inst setFecha:fecha. ^inst.] 					ifNotNil: [^'Parcela ya sembrada'].! !!Empresa methodsFor: 'as yet unclassified' stamp: 'Anonymous 9/22/2022 16:39'!calcularGananciaNetaUltimaCosecha: codigoParcela"Busca la parcela correspondiente a codigoParcela y le calcula la ganancia neta de la ultima cosecha, sin restar los gastos de dicha parcela"|aux cosechaaux gananciaNeta|aux := parcelas detect: [ :i| i getCodigo = codigoParcela].cosechaaux := ((aux getCosechas) at: ((aux getCosechas )size)).gananciaNeta:= ((cosechaaux getPrecioActualCultivo) * (cosechaaux getRendimiento) * (aux getDimension)).^gananciaNeta.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Empresa class	instanceVariableNames: ''!!Empresa class methodsFor: 'instance creation' stamp: 'Anonymous 9/22/2022 17:05'!new"Crea una instancia de Empresa y la inicializa."|inst|inst:= super new.inst inicializar.^inst.! !Object subclass: #Parcela	instanceVariableNames: 'siembra cosechas codigo dimension'	classVariableNames: ''	package: 'TP1'!!Parcela methodsFor: 'as yet unclassified' stamp: 'Anonymous 9/22/2022 17:06'!calcularGananciaCosecha: i"Obtiene la ganancia de la parcela con la formula: ganancia = precio del cultivo x cantidad de hectáreas de la parcela x rendimiento por hectárea - gastos de Parcela."|gananciaNeta|gananciaNeta := (self getDimension)*(i getPrecioActualCultivo)*(i getRendimiento).self esParcelaAcuerdo ifTrue:[^gananciaNeta -((self gastos*0.01)*gananciaNeta)]							ifFalse:[^gananciaNeta - self gastos.].! !!Parcela methodsFor: 'as yet unclassified' stamp: 'Anonymous 9/22/2022 17:07'!gastos"Redefinido en las distintas subclases."! !!Parcela methodsFor: 'as yet unclassified' stamp: 'Anonymous 9/22/2022 17:07'!esParcelaAcuerdo"Indica que no es una parcela de Acuerdo."^false.! !!Parcela methodsFor: 'as yet unclassified' stamp: 'Anonymous 9/22/2022 17:07'!getCosechas"Retorna todas las cosechas de la parcela."^cosechas.! !!Parcela methodsFor: 'as yet unclassified' stamp: 'Anonymous 9/22/2022 17:08'!getDimension"Retorna la cantidad de hectareas de la parcela."^dimension.! !!Parcela methodsFor: 'as yet unclassified' stamp: 'Anonymous 9/22/2022 17:08'!getSiembra"Retorna la siembra actual de la parcela."^siembra.! !!Parcela methodsFor: 'as yet unclassified' stamp: 'Anonymous 9/22/2022 17:07'!getCodigo"Retorna el codigo de la parcela."^codigo.! !!Parcela methodsFor: 'initialization' stamp: 'Anonymous 9/22/2022 17:11'!setSiembra: unaSiembra"Define la siembra actual de la parcela."siembra := unaSiembra.! !!Parcela methodsFor: 'initialization' stamp: 'Anonymous 9/22/2022 17:11'!setDimension: cant"Define la cantidad de hectareas de la parcela."dimension := cant.! !!Parcela methodsFor: 'initialization' stamp: 'Anonymous 9/16/2022 16:34'!setCodigo: codigoParcelacodigo:= codigoParcela.! !!Parcela methodsFor: 'initialization' stamp: 'Anonymous 9/22/2022 17:11'!setCosechas"Define la lista de cosechas de la parcela."cosechas := OrderedCollection new.! !!Parcela methodsFor: 'initialization' stamp: 'Anonymous 9/22/2022 17:09'!setCosecha: unaCosecha"Agrega una cosecha al historico de cosechas de la parcela."cosechas add: unaCosecha.! !Parcela subclass: #ParcelaNoPropia	instanceVariableNames: 'propietario'	classVariableNames: ''	package: 'TP1'!!ParcelaNoPropia methodsFor: 'initialization' stamp: 'Anonymous 9/22/2022 17:12'!setPropietario: dni"Define el dni del propietario de la parcela."propietario := dni.! !ParcelaNoPropia subclass: #ParcelaAcuerdo	instanceVariableNames: 'porcentajeCosecha'	classVariableNames: ''	package: 'TP1'!!ParcelaAcuerdo methodsFor: 'initialization' stamp: 'Anonymous 9/22/2022 17:13'!setPorcentajeAcordado: porcentaje"Define el porcentaje que se le pagara al propietario cuando se coseche la parcela."porcentajeCosecha := porcentaje.! !!ParcelaAcuerdo methodsFor: 'as yet unclassified' stamp: 'Anonymous 9/22/2022 17:12'!esParcelaAcuerdo "Se indica que la parcela es del tipo Acuerdo."^true.! !!ParcelaAcuerdo methodsFor: 'as yet unclassified' stamp: 'Anonymous 9/22/2022 17:13'!gastos"Se retorna el porcentaje de la ganancia neta que se le debe pagar al propietario."^porcentajeCosecha! !ParcelaNoPropia subclass: #ParcelaAlquilada	instanceVariableNames: 'costoAlquiler'	classVariableNames: ''	package: 'TP1'!!ParcelaAlquilada methodsFor: 'as yet unclassified' stamp: 'Anonymous 9/22/2022 17:14'!gastos"Se retorna el valor fijo de alquiler a pagar al propietario."^costoAlquiler.! !!ParcelaAlquilada methodsFor: 'initialization' stamp: 'Anonymous 9/22/2022 17:14'!setCostoAlquiler: importe"Se define el valor fijo a pagar como alquiler de la parcela."costoAlquiler := importe.! !Parcela subclass: #ParcelaPropia	instanceVariableNames: 'gastosImpositivos'	classVariableNames: ''	package: 'TP1'!!ParcelaPropia methodsFor: 'initialization' stamp: 'Anonymous 9/22/2022 17:15'!setCostoImpuestos: importe"Se define el valor fijo de impuestos a pagar por poseer la parcela."gastosImpositivos := importe.! !!ParcelaPropia methodsFor: 'as yet unclassified' stamp: 'Anonymous 9/22/2022 17:15'!gastos"Se retorna el valor fijo de impuestos a pagar por poseer la parcela."^gastosImpositivos.! !Object subclass: #Propietario	instanceVariableNames: 'nombre dni apellido parcelas'	classVariableNames: ''	package: 'TP1'!!Propietario methodsFor: 'as yet unclassified' stamp: 'Anonymous 9/22/2022 17:16'!getParcelas"Se retorna la lista de parcelas que el propietario tiene en su dominio."^parcelas.! !!Propietario methodsFor: 'as yet unclassified' stamp: 'Anonymous 9/22/2022 17:16'!getDni "Se retorna el dni del propietario."^dni.! !!Propietario methodsFor: 'as yet unclassified' stamp: 'Anonymous 9/22/2022 17:16'!agregarParcela: unaParcela"Se agrega una parcela a la lista de parcelas en su dominio."parcelas add: unaParcela .! !!Propietario methodsFor: 'initialization' stamp: 'Anonymous 9/22/2022 17:17'!setNombre: n"Se define el nombre del prpoietario."nombre := n.! !!Propietario methodsFor: 'initialization' stamp: 'Anonymous 9/22/2022 17:17'!setApellido: ap"Se define el apellido del propietario."apellido:=ap.! !!Propietario methodsFor: 'initialization' stamp: 'Anonymous 9/22/2022 17:17'!setDni: doc"Se define el dni del propietario."dni:= doc.! !!Propietario methodsFor: 'initialization' stamp: 'Anonymous 9/22/2022 17:17'!setParcelas"Se crea una lista donde se almacenaran las parcelas que el propietario tiene en su dominio."parcelas := OrderedCollection new.! !Object subclass: #Siembra	instanceVariableNames: 'cosecha variedadCultivo fecha'	classVariableNames: ''	package: 'TP1'!!Siembra methodsFor: 'initialization' stamp: 'Anonymous 9/22/2022 17:18'!setFecha: unaFecha"Se define la fecha de la siembra."fecha:= unaFecha.! !!Siembra methodsFor: 'initialization' stamp: 'Anonymous 9/22/2022 17:19'!setVariedadCultivo: nombreCultivo"Se define el tipo de cultivo de la siembra."variedadCultivo :=nombreCultivo.! !!Siembra methodsFor: 'initialization' stamp: 'Anonymous 9/22/2022 17:18'!setCosechaenSiembra: unaCosecha"Se define la cosecha correspondiente a la siembra."cosecha:= unaCosecha.! !!Siembra methodsFor: 'initialization' stamp: 'Anonymous 9/22/2022 17:18'!getFecha: unaFecha"Se retorna la fecha de la siembra."^fecha.! !